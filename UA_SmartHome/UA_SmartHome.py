"""

# Перевірка версії Пітона (python --version => Python 3.13.2)

# Час
tгод = 1  # Одна година
print("t =", tгод, "годин")  # Візуалізація годин
print("Все відбувається за 1 секунду")  # Візуалізація події

# Сонце
Gсонце = 1  # Вхідна потужність сонця 0 - 1.1 кВт   День , Ясно : 1,1;  Ніч , Пасмурно : 0
k = 0.5  # Тип сонячного колектора 0.1 - 0.9
print("Тип сонячного колектора (0.1 - 0.9) k =", k)  # Візуалізація типу сонячного колектора
dGсонце = k * Gсонце  # Потужність, яку віддає сонце колектору, з врахуванням типу колектора, кВт
print("Потужності сонця на поверхні сонячного колектора Gсонце =", Gсонце, "кВт")  # Візуалізація потужності сонця на поверхні сонячної системи кВт
dEсонце = dGсонце * tгод / 3600  # Частина енергії, яку віддає сонце колектору кВт * год  за 1 с

# Атмосфера
Tатмосфера = 20  # Температура атмосфери, стартова ідеальна нульова 20С , діапазон -35С / +95C   Зима : -35;  Літо : +95
print("Tатмосфера =", Tатмосфера, "градусів С")  # Візуалізація температури атмосфери

# Колектор
# c - питома теплоємність води 4186,8 Дж/(кг·°C)
# 1 л води= 1 кг води
# 1 Дж = 1 Вт*с
# c води 4186,8 / 1000 / 3600 = 0.001163  ((кВт*год)/(л*С))
try:
    Eколектор  # Перевіряє чи є значення, якщо нема, то
except NameError: 
    Eколектор = 0.2  # Встановлює значення
print("Eколектор =",Eколектор, "кВт*год")  # Візуалізація енергії колектора
Tколектор = Eколектор *100  # Температура колектора, градусів C
print("Tколектор =",Tколектор, "С")  # Візуалізація температури колектора
Sколектор = 1  # Сонячна площа колектора , м2
print("Sколектор =",Sколектор, "м2")  # Візуалізація плоші колектора
Vколектор = 10 * Sколектор  # Обєм колектора в літрах
print("Vколектор =",Vколектор, "л")  # Візуалізація обєма колектора
cводи = 0.001163  # ((кВт*год)/(л*С))  Теплоємність води за 1 секунду в кВт*год
maxTколектор = 100  # Максимальна температура колектора
minTколектор = 0  # Мінімальна температура колектора
maxEколектор = Vколектор * cводи * (maxTколектор - minTколектор)  # Максимальна енергія в колектор від сонця в кВт * год
print("maxEколектор =",maxEколектор, "максимальної енергії колектора, кВт")  # Візуалізація максимальної енергії колектора
Eколектор += dEсонце  # Добавка в колектор від сонця
print("Eколектор =",Eколектор, "сумарної енергії колектора, кВт")  # Візуалізація сумарної енергії колектора
Kколектор_бак = 1  # Насос між колектором і баком, продуктивність кВт*год 
print("Kколектор_бак =",Kколектор_бак, "продуктивність насосу колектор-бак")  # Візуалізація насоса
dEколектор = Eколектор * Kколектор_бак / 3600  # Частина енергії, яку віддає колектор баку, кВт*год в 1 секунду
Tколектор = Eколектор *100  # Температура колектора, градусів C
print("Tколектор =",Tколектор, "С")  # Візуалізація температури колектора
Eколектор -= dEколектор  # Добавка в колектор від сонця
print("Eколектор =",Eколектор, "сумарної енергії колектора, кВт")  # Візуалізація сумарної енергії колектора
Tколектор = Eколектор *100  # Температура колектора, градусів C
print("Tколектор =",Tколектор, "С")  # Візуалізація температури колектора

# Нагрівач
Gнагрівач = 1  # Потужність нагрівача 0 - 10 кВт
print("Gнагрівач",Gнагрівач, "кВт")  # Візуалізація енергії нагрівача
Eнагрівач = Gнагрівач * tгод  # Розрахунок енергії нагрівача кВт*год
dEнагрівач = Eнагрівач / 3600  # Розрахунок енергії нагрівача кВт*год за 1 секунду

# Бак
try:
    Eбак  # Перевіряє чи є значення, якщо нема, то
except NameError:
    Eбак = 0.2  # Встановлює значення
print("Eбак =",Eбак, "кВт*год")  # Візуалізація енергії бака
Tбак = Eбак * 100  # Температура бака, градусів C
print("Tбак =",Tбак, "С")  # Візуалізація температури бака
maxTбак = 100  # Максимальна температура бака
minTбак = 0  # Мінімальна температура бака
Vбак = 1000  # Обєм бака в літрах
print("Vбак =",Vбак, "л")  # Візуалізація обєма бака
maxEбак = Vбак * cводи * (maxTбак - minTбак)  # Максимальна енергія бака в кВт * год
Eбак += (dEколектор + dEнагрівач)  # Розрахунок енергії бака
print("Eбак =",Eбак, "кВт*год")  # Візуалізація енергії бака
Kбак_радіатор = 1  # Насос з бака в радіатор
print("Kбак_радіатор =",Kбак_радіатор, "продуктивність насосу бак-радіатор")  # Візуалізація насоса
dEбак = Eбак * Kбак_радіатор / 3600  # Частина енергії, яку віддає бак до радіатора кВт*год в 1 секунду
Tбак = Eбак * 100  # Температура бака, градусів C
print("Tбак =",Tбак, "С")  # Візуалізація температури бака
Eбак -= dEбак  # Розрахунок зменшення енергії в баку енергії
print("Eбак =",Eбак, "кВт*год")  # Візуалізація енергії бака
Tбак = Eбак * 100  # Температура бака, градусів C
print("Tбак =",Tбак, "С")  # Візуалізація температури бака

# Радіатор
try:
    Tдім  # Перевіряє чи є значення, якщо нема, то
except NameError:
    Tдім = 20  # Встановлює значення
print("Tдім =",Tдім, "градуси С")  # Візуалізація температури дому
try:
    Eрадіатор  # Перевіряє чи є значення, якщо нема, то
except NameError:
    Eрадіатор = 0.2  # Встановлює значення
print("Eрадіатор =",Eрадіатор, "сумарна енергія радіатора в кВт*год")  # Візуалізація енергії радіатора
maxTрадіатор = 100  # Максимальна температура радіатора
minTрадіатор = 0  # Мінімальна температура радіатора
Vрадіатор = 100  # Обєм бака в літрах
print("Vрадіатор =",Vрадіатор, "л")  # Візуалізація обєма радіатора
maxEрадіатор = Vрадіатор * cводи * (maxTрадіатор - minTрадіатор)  # Максимальна енергія радіатора в кВт * год
Eрадіатор += dEбак  # Розрахунок енергії радіатора
print("Eрадіатор =",Eрадіатор, "сумарна енергія радіатора в кВт*год")  # Візуалізація енергії радіатора
Tрадіатор = Eрадіатор * 100  # Температура радіатора, градусів C
print("Tрадіатор =",Tрадіатор, "С")  # Візуалізація температури радіатора
Sрадіатор = 1  # Площа радіатора що віддає тепло (м2)
dрадіатор = 0.01  # Товщина радіатора (м)
fрадіатор = 0.001  # Коефіцієнт теплопровідності радіатора (кВт/(м*С))
Rрадіатор = dрадіатор / fрадіатор  # Тепловий опір радіатора ((м2*С)/кВт)
dEрадіатор = (Sрадіатор / Rрадіатор) * (Tрадіатор - Tдім) / 3600  # Частина енергії, яку віддає радіатор дому, кВт*год за 1 секунду
Eрадіатор -= dEрадіатор  # Розрахунок енергії радіатора
print("Eрадіатор =",Eрадіатор, "кВт*год")  # Візуалізація енергії радіатора
Tрадіатор = Eрадіатор * 100  # Температура радіатора, градусів C
print("Tрадіатор =",Tрадіатор, "С")  # Візуалізація температури радіатора

# Дім
# c - питома теплоємність повітря  1005 Дж/(кг·°C)
# 1005 / 1000 / 3600 = 0.000279  ((кВт*год)/(л*С))
try:
    Eдім  # Перевіряє чи є значення, якщо нема, то
except NameError:
    Eдім = 0.2  # Встановлює значення
print("Eдім",Eдім,"сумарна енергія дому в кВт*год")  # Візуалізація енергії дому
Tдім = Eдім * 100  # Температура дому, градусів C
print("Tдім =",Tдім, "С")  # Візуалізація температури радіатора
Eдім += dEрадіатор  # Розрахунок енергії дому
print("Eдім",Eдім,"сумарна енергія дому в кВт*год")  # Візуалізація енергії дому
maxTдім = 100  # Максимальна температура дому
minTдім = 0  # Мінімальна температура дому
Vдім = 10000  # Обєм бака в літрах
print("Vдім =",Vдім, "л")  # Візуалізація обєма дому
cповітря = 0.000279  # ((кВт*год)/(л*С))
maxEдім = Vдім * cповітря * (maxTдім - minTдім)  # Максимальна енергія дому в кВт * год
Tдім = Eдім * 100  # Температура дому, градусів C
print("Tдім =",Tдім, "С")  # Візуалізація температури радіатора
Sдім = 1  # Площа всіх зовнішніх поверходь будинку (м2)
dдім = 0.01  # Товщина поверхонь будинку (м)
fдім = 0.001  # Коефіцієнт теплопровідності поверхонь будинку (кВт/(м*С))
Rдім = dдім / fдім  # Тепловий опір ізоляції будинку ((м2*С)/кВт)
dEдім = (Sдім / Rдім) * (Tатмосфера - Tдім) / 3600  # Частина енергії, яку втрачає дім, кВт*год за 1 секунду
Eдім += dEдім  # Розрахунок енергії дому
print("Eдім",Eдім)  # Візуалізація енергії дому
Tдім = Eдім * 100  # Температура дому, градусів C
print("Tдім =",Tдім, "С")  # Візуалізація температури радіатора


# Вікно
# Датчики температур в вигляді повзунка
# Сумарні енергії в вигляді стовбчиків
# Графіки зміни температур і енегрій

# Встановлення бібліотеки (pip install dearpygui)
# >>> import importlib.metadata
# >>> print(importlib.metadata.version("dearpygui"))
# >>> 2.0.0

import dearpygui.dearpygui as dpg

# Створення контексту Dear PyGui
dpg.create_context()
# Створення вікна перегляду (viewport) з назвою та розмірами
# Збільшена ширина та висота для розміщення вертикальних слайдерів та їхніх підписів
dpg.create_viewport(title='Smart Home', width=800, height=500)

# Реєстрація шрифтів
with dpg.font_registry():
    # Шлях до вашого шрифту. Змініть його на реальний шлях.
    # Наприклад, якщо Arial.ttf знаходиться в C:/Windows/Fonts/
    # Або якщо ви завантажили Roboto-Regular.ttf і поклали його поруч зі скриптом

    font_path = "C:/Windows/Fonts/Arial.ttf" # Приклад для Windows
    # font_path = "Roboto-Regular.ttf" # Приклад, якщо шрифт поруч зі скриптом

    try:
        # Завантажуємо шрифт
        with dpg.font(font_path, 20) as default_font:
            # ЦЕ КЛЮЧОВИЙ МОМЕНТ: додаємо діапазони символів для кирилиці
            # mvFontRangeHint_Cyrillic - це вбудований діапазон для кирилиці
            dpg.add_font_range_hint(dpg.mvFontRangeHint_Cyrillic)
            # Також можна додати стандартний діапазон (латиниця, цифри, знаки)
            dpg.add_font_range_hint(dpg.mvFontRangeHint_Default)

        # Прив'язуємо завантажений шрифт як шрифт за замовчуванням для всього додатка
        dpg.bind_font(default_font)

    except FileNotFoundError:
        print(f"Помилка: Файл шрифту не знайдено за шляхом: {font_path}")
        print("Будь ласка, перевірте шлях або використовуйте інший шрифт.")
        print("Текст може відображатися некоректно без правильного шрифту.")
    except Exception as e:
        print(f"Виникла помилка під час завантаження шрифту: {e}")
        print("Текст може відображатися некоректно без правильного шрифту.")

# Створюємо вікно та додаємо віджети з українським текстом
with dpg.window(label="Датчики температури", width=750, height=450): # Налаштований розмір вікна
    # Використовуємо групу з горизонтальним розташуванням для розміщення підписів та слайдерів поруч
    with dpg.group(horizontal=True):
        # Температура зовні
        with dpg.group(): # Група для підпису та слайдера
            dpg.add_text("Зовні")
            # Слайдер для температури зовні
            # vertical=True - робить слайдер вертикальним
            # width/height - встановлюють фізичні розміри слайдера
            dpg.add_slider_int(label="град. С", min_value=-100, max_value=100,
                               vertical=True, width=20, height=250)
        # Додаємо простір між слайдерами (використовуємо add_spacer замість застарілого add_spacing)
        dpg.add_spacer(width=30)

        # Температура сонячного колектора
        with dpg.group():
            dpg.add_text("Сонячний колектор")
            dpg.add_slider_int(label="град. С", min_value=0, max_value=100,
                               vertical=True, width=20, height=250)
        dpg.add_spacer(width=30)

        # Температура бака
        with dpg.group():
            dpg.add_text("Бак")
            dpg.add_slider_int(label="град. С", min_value=0, max_value=100,
                               vertical=True, width=20, height=250)
        dpg.add_spacer(width=30)

        # Температура радіатора
        with dpg.group():
            dpg.add_text("Радіатор")
            dpg.add_slider_int(label="град. С", min_value=0, max_value=100,
                               vertical=True, width=20, height=250)
        dpg.add_spacer(width=30)

        # Температура будинку
        with dpg.group():
            dpg.add_text("Будинок")
            dpg.add_slider_int(label="град. С", min_value=0, max_value=100,
                               vertical=True, width=20, height=250)

# Налаштування Dear PyGui
dpg.setup_dearpygui()
# Відображення вікна перегляду
dpg.show_viewport()
# Запуск головного циклу Dear PyGui
dpg.start_dearpygui()
# Знищення контексту Dear PyGui після завершення роботи
dpg.destroy_context()

"""
import dearpygui.dearpygui as dpg
import time

# --- ГЛОБАЛЬНІ ЗМІННІ ДЛЯ ЗБЕРІГАННЯ ДАНИХ ДАТЧИКІВ ТА ГРАФІКІВ ---
sensor_data = {
    "Зовні": {'values': [], 'time_points': [], 'max_history': 50},
    "Сонячний колектор": {'values': [], 'time_points': [], 'max_history': 50},
    "Бак": {'values': [], 'time_points': [], 'max_history': 50},
    "Радіатор": {'values': [], 'time_points': [], 'max_history': 50},
    "Будинок": {'values': [], 'time_points': [], 'max_history': 50},
}

# --- ФУНКЦІЇ ЗВОРОТНОГО ВИКЛИКУ ДЛЯ ПОВЗУНКІВ ТА ОНОВЛЕННЯ ГРАФІКІВ ---
def update_plot(sender, app_data, user_data):
    sensor_name = user_data['name']
    plot_series_tag = user_data['series_tag']
    
    current_data = sensor_data[sensor_name]
    
    current_data['values'].append(app_data)
    current_data['time_points'].append(len(current_data['values']) - 1)

    if len(current_data['values']) > current_data['max_history']:
        current_data['values'].pop(0)
        current_data['time_points'].pop(0)
        current_data['time_points'] = [i for i in range(len(current_data['values']))]

    dpg.set_value(plot_series_tag, [list(current_data['time_points']), list(current_data['values'])])

    dpg.fit_axis_data(f"{sensor_name}_x_axis")
    dpg.fit_axis_data(f"{sensor_name}_y_axis")


# --- НАЛАШТУВАННЯ DEAR PYGUI ---
dpg.create_context()
# Збільшуємо ширину та висоту вікна перегляду, щоб вмістити вертикальні повзунки та графіки
dpg.create_viewport(title='Smart Home - Датчики та Графіки', width=1300, height=900)

# --- НАЛАШТУВАННЯ ШРИФТІВ ---
with dpg.font_registry():
    font_path = "C:/Windows/Fonts/Arial.ttf" # Приклад для Windows
    try:
        with dpg.font(font_path, 20) as default_font:
            dpg.add_font_range_hint(dpg.mvFontRangeHint_Cyrillic)
            dpg.add_font_range_hint(dpg.mvFontRangeHint_Default)
        dpg.bind_font(default_font)
    except FileNotFoundError:
        print(f"Помилка: Файл шрифту не знайдено за шляхом: {font_path}")
        print("Будь ласка, перевірте шлях або використовуйте інший шрифт.")
        print("Текст може відображатися некоректно без правильного шрифту.")
    except Exception as e:
        print(f"Виникла помилка під час завантаження шрифту: {e}")
        print("Текст може відображатися некоректно без правильного шрифту.")

# --- СТВОРЕННЯ ВІКНА ДАТЧИКІВ ТА ЇХНІХ ПОВЗУНКІВ ---
# Розташовуємо вікно з повзунками ліворуч, збільшуємо висоту для вертикальних повзунків
with dpg.window(label="Панель керування датчиками", width=800, height=700, pos=[0,0]): # Змінив ширину
    # Головна горизонтальна група для розміщення всіх колонок датчиків поруч
    with dpg.group(horizontal=True):
        sensor_configs = [
            ("Зовні", -100, 100),
            ("Сонячний колектор", 0, 100),
            ("Бак", 0, 100),
            ("Радіатор", 0, 100),
            ("Будинок", 0, 100),
        ]

        for name, min_val, max_val in sensor_configs:
            # Кожна колонка (підпис + вертикальний повзунок) буде в окремій вертикальній групі
            with dpg.group():
                dpg.add_text(name) # Підпис датчика
                
                slider_tag = f"{name}_slider"
                series_tag = f"{name}_series" 
                
                # Повзунок тепер вертикальний
                dpg.add_slider_int(
                    label="град. С", # Це лейбл поруч зі значенням повзунка
                    min_value=min_val,
                    max_value=max_val,
                    vertical=True, # Встановлюємо вертикальний напрямок
                    width=20,      # Ширина вертикального повзунка
                    height=250,    # Висота вертикального повзунка
                    tag=slider_tag,
                    callback=update_plot,
                    user_data={'name': name, 'series_tag': series_tag}
                )
            # Додаємо простір між колонками повзунків
            dpg.add_spacer(width=5) 

# --- СТВОРЕННЯ ОКРЕМОГО ВІКНА ДЛЯ ГРАФІКІВ ---
# Розташовуємо вікно з графіками праворуч від вікна повзунків
with dpg.window(label="Графіки зміни температури", width=750, height=700, pos=[470,0]): # Змінив pos, щоб не накладалось
    for name, _, _ in sensor_configs:
        plot_tag = f"{name}_plot"
        series_tag = f"{name}_series"
        x_axis_tag = f"{name}_x_axis"
        y_axis_tag = f"{name}_y_axis"

        with dpg.plot(label=f"Графік: {name}", height=120, width=-1, tag=plot_tag): # width=-1 for fill parent width
            dpg.add_plot_axis(dpg.mvXAxis, label="Точки часу", tag=x_axis_tag)
            dpg.add_plot_axis(dpg.mvYAxis, label="Температура, °C", tag=y_axis_tag)
            
            dpg.add_line_series([], [], parent=y_axis_tag, tag=series_tag)
            
        dpg.add_spacer(height=10) # Відступ між графіками


# --- ЗАПУСК ДОДАТКУ ---
dpg.setup_dearpygui()
dpg.show_viewport()
dpg.start_dearpygui()
dpg.destroy_context()
